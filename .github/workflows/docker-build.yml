name: Build and Push Docker Image
on:
  release:
    types: [published] # Only run when a release is published
  workflow_dispatch:  # To allow manual triggering
jobs:
  build-and-push:
    runs-on: ubuntu-latest
    # ensure releases are from main
    if: github.event.release && (github.event.release.target_commitish == 'main' || github.event.release.target_commitish == 'master')
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract release version
        id: version
        run: |
          # Get version from release tag (remove 'v' prefix if present)
          VERSION=${GITHUB_REF#refs/tags/}
          VERSION=${VERSION#v}
          echo "VERSION=$VERSION" >> $GITHUB_ENV
      
      # Steps to handle release notes and version file
      - name: Get release notes
        if: github.event_name == 'release'
        id: release_notes
        uses: actions/github-script@v6
        with:
          script: |
            const release = await github.rest.repos.getRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: context.payload.release.id
            });
            const releaseNotes = release.data.body || "No release notes provided";
            core.setOutput('notes', releaseNotes);
      
      - name: Create version file
        if: github.event_name == 'release'
        run: |
          mkdir -p ./bot/data
          cat << EOF > ./bot/version.json
          {
            "current_version": "${{ env.VERSION }}",
            "release_notes": $(echo '${{ steps.release_notes.outputs.notes }}' | jq -R -s .),
            "last_seen_version": "0.0.0"
          }
          EOF
          echo "Created version file:"
          cat ./bot/version.json
      
      # Ensures the version file is available in the Docker build context
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:latest
            ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:${{ env.VERSION }}